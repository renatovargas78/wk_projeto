unit uClientes;

interface

uses DB, SysUtils, uConexao, FireDAC.Comp.Client;

type
  TClientes = class
  private
    FCodigo: integer;
    FNome: string;
    FCidade: string;
    FUF: string;
    FQry: TFDQuery;
    FDs: TDataSource;
    Conn : TConexao;
    FDsPesquisa: tDataSource;
    FQryPesquisa: TFDQuery;
    procedure SetCodigo(const Value: integer);
    procedure SetNome(const Value: string);
    procedure SetCidade(const Value: string);
    procedure SetUF(const Value: string);
    procedure SetDs(const Value: TDataSource);
    procedure SetQry(const Value: TFDQuery);
    procedure SetDsPesquisa(const Value: tDataSource);
    procedure SetQryPesquisa(const Value: TFDQuery);

  published
  public
    constructor Create(Conexao: TConexao); // utiliza a classe de conexão
    destructor Destroy; override;
    // Propriedades
    property Codigo : Integer read FCodigo write SetCodigo;
    property Nome : string read FNome write SetNome;
    property Cidade : string read FCidade write SetCidade;
    property UF : string read FUF write SetUF;

    // Componentes
    property Qry : TFDQuery read FQry write SetQry;
    property QryPesquisa : TFDQuery read FQryPesquisa write SetQryPesquisa;
    property Ds : TDataSource read FDs write SetDs;
    property DsPesquisa : tDataSource read FDsPesquisa write SetDsPesquisa;
    // Métodos
    function Selecionar(Chave: Integer; Nome,Ordem: String):Boolean;
    function Inserir : boolean;
    function Alterar : boolean;
    function Deletar(chave: integer) : boolean;
end;

implementation { TClientes }

function TClientes.Alterar: boolean;
begin
{  with Qry do
  begin
    Close;
    SQL.Text :=    ' Update Clientes Set '+
                ' Nome = :Nome,'+
                ' Endereco = :Endereco,'+
                ' Telefones = :Telefones,'+
                ' Obs = :Obs'+
                ' Where '+
                ' id = :id';
    // Observe a utilização dos Fileds (FChave,Fnome...etc...)
    Params.ParamByName('id').Value           := FChave;
    Params.ParamByName('Nome').Value         := Fnome;
    Params.ParamByName('Endereco').Value     := Fendereco;
    Params.ParamByName('Telefones').Value    := FTelefone;
    Params.ParamByName('Obs').Value          := FObs;    try
    ExecSQL;       Result := true;
    except       Result := False;
    end;
  end;}
end;

constructor TClientes.Create(Conexao: TConexao);
begin
  {No create é passada a conection das Qrys }
  Conn := Conexao;
  Qry             := TFDQuery.Create(nil);
  Ds              := TDataSource.Create(nil);
  QryPesquisa     := TFDQuery.Create(nil);
  DsPesquisa      := TDataSource.Create(nil);
  Qry.Connection  := Conn.Conexao;
  //QryPesquisa.Connection := Conexao.Create;
  //Ds.DataSet         := Qry;
  //DsPesquisa.DataSet := QryPesquisa;
end;

function TClientes.Deletar(Chave: integer): boolean;
begin
  {with Qry do
  begin
    Close;
    SQL.Text  := ' delete from Clientes'+
                 ' where id = :Chave';
    Parameters.ParamByName('Chave').Value := Chave;
    try
      ExecSQL;
      Result := True;
    except
      Result := False;
    end;
  end;}
end;

destructor TClientes.Destroy;
begin
  FreeAndNil(Conn);
  inherited;
end;

function TClientes.Inserir: boolean;
begin
  {with Qry  do
  begin
    Close;
    Sql.text := ' Insert into Clientes'+
                ' (Nome, Endereco, Telefones, Obs)'+
                ' Values '+
                ' (:Nome, :Endereco, :Telefones, :Obs)';
    // Observe a utilização dos Fileds (FChave,Fnome...etc...)
    Parameters.ParamByName('Nome').Value           := Fnome;
    Parameters.ParamByName('Endereco').Value       := Fendereco;
    Parameters.ParamByName('Telefones').Value      := FTelefone;
    Parameters.ParamByName('Obs').Value            := FObs;
    try
      ExecSQL;
      result := true;
    except
      result := false;
    end;
  end;  }
end;

function TClientes.Selecionar(Chave: Integer; Nome,Ordem: String): Boolean;
begin
 { Nome := '%'+Nome+'%';
  with QryPesquisa do
  begin
    Close;
    Sql.Text := ' Select * from Clientes where 1=1 ';

    if Chave > 0 then       begin
      Sql.add(' and id = :Chave');
      Parameters.ParamByName('Chave').Value := Chave;
    end;

    if Nome <> '' then
      sql.add(' and Nome like '+quotedstr(Nome));

    if Ordem <> '' then
      sql.add(' Order by '+Ordem);

    try
      Open;

      if not eof then
        Result := true
      else
        Result := false;
    except
       Result := false;
    end;
  end;  }
end;

procedure TClientes.SetCodigo(const Value: integer);
begin
  FCodigo := Value;
end;

procedure TClientes.SetDs(const Value: TDataSource);
begin
  FDs := Value;
end;

procedure TClientes.SetDsPesquisa(const Value: tDataSource);
begin
  FDsPesquisa := Value;
end;

procedure TClientes.SetCidade(const Value: string);
begin
  FCidade := Value;
end;

procedure TClientes.SetNome(const Value: string);
begin
  FNome := Value;
end;

procedure TClientes.SetUF(const Value: string);
begin
  FUF := Value;
end;

procedure TClientes.SetQry(const Value: TFDQuery);
begin
  FQry := Value;
end;

procedure TClientes.SetQryPesquisa(const Value: TFDQuery);
begin
  FQryPesquisa := Value;
end;

end.
